rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /ids/{id} {
    	allow create: if checkOnlyTimestamp(request) && checkTimestampInRange(request, 3);
      allow update: if checkOnlyTimestamp(request) && checkTimestampInRange(request, 3) && checkTimestampIsLater(request, resource, 20)
    }
    match /trialData/{dataId} {
    	allow create: if !exists(/databases/$(database)/documents/trialData/$(request.resource.data.id)) && get(/databases/$(database)/documents/ids/$(request.resource.data.id)).data.timestamp.toMillis() < request.time.toMillis() - duration.value(20, 's').seconds() * 1000
    }
    match /highscores/{highscoreId} {
    	allow read;
    	allow update: if request.resource.data.keys().hasOnly(['highscore', 'id']) && get(/databases/$(database)/documents/ids/$(request.resource.data.id)).data.timestamp.toMillis() < request.time.toMillis() - duration.value(20, 's').seconds() * 1000 && request.resource.data.id != get(/databases/$(database)/documents/highscores/$(highscoreId)).data.id
    }
    
    
    function checkOnlyTimestamp(request) {
    	return request.resource.data.keys().hasOnly(['timestamp'])
    }
    function checkTimestampInRange(request, range) {
    	return request.resource.data.timestamp.toMillis() < request.time.toMillis() + duration.value(range, 's').seconds() * 1000 || request.resource.data.timestamp.toMillis() > request.time.toMillis() - duration.value(range, 's').seconds() * 1000
    }
    function checkTimestampIsLater(request, resource, delay) {
    	return resource.data.timestamp.toMillis() < request.time.toMillis() - duration.value(delay, 's').seconds() * 1000
    }
     
  }
}

  